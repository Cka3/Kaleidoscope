/* -*- mode: c++ -*-
 * Kaleidoscope-Hardware-Model01 -- Keyboard.io Model01 hardware support for Kaleidoscope
 * Copyright (C) 2017-2018  Keyboard.io, Inc
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

// The firmware we use to update the ATTinys with is:
//   https://github.com/keyboardio/avr_keyscanner/tree/9bc65bdd5c010879734b00f43f6edeadefe4f761

#ifdef ARDUINO_AVR_MODEL01

#include <Arduino.h>

#include <util/crc16.h>
extern "C" {
#include <twi.h>
};
#include <avr/wdt.h>

#include "ScannerUpdate.h"

namespace kaleidoscope {
namespace hardware {
namespace keyboardio {
namespace model01 {

#define DELAY 1

#define LEFT_ADDRESS 0x50
#define RIGHT_ADDRESS 0x53

#define ELEMENTS(arr)  (sizeof(arr) / sizeof((arr)[0]))

#define ENDTRANS_SUCCESS 0
#define ENDTRANS_DATA_TOO_LONG 1
#define ENDTRANS_ADDR_NACK 2
#define ENDTRANS_DATA_NACK 3
#define ENDTRANS_ERROR 4

// { Compiled firmware...

#define page_size 64
#define frame_size 16
#define blank 0xff
#define pages 39
#define firmware_length 2496

static uint16_t offsets[pages] = {
  0, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960,
  1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792,
  1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432
};

static const byte firmware[firmware_length] PROGMEM = {
  0x1a, 0xc0, 0x34, 0xc0, 0x33, 0xc0, 0x32, 0xc0, 0x31, 0xc0, 0x30, 0xc0, 0x2f, 0xc0, 0x2e, 0xc0,
  0x2d, 0xc0, 0xe7, 0xc1, 0x2b, 0xc0, 0x2a, 0xc0, 0x29, 0xc0, 0x28, 0xc0, 0x27, 0xc0, 0x7f, 0xc1,
  0x25, 0xc0, 0x24, 0xc0, 0x23, 0xc0, 0xec, 0xc1, 0xd8, 0xc0, 0xe3, 0xc0, 0xe2, 0xc0, 0xd5, 0xc0,
  0xe0, 0xc0, 0xd3, 0xc0, 0xde, 0xc0, 0x11, 0x24, 0x1f, 0xbe, 0xcf, 0xef, 0xd2, 0xe0, 0xde, 0xbf,
  0xcd, 0xbf, 0x11, 0xe0, 0xa0, 0xe0, 0xb1, 0xe0, 0xe0, 0xe8, 0xf9, 0xe0, 0x02, 0xc0, 0x05, 0x90,
  0x0d, 0x92, 0xa4, 0x30, 0xb1, 0x07, 0xd9, 0xf7, 0x22, 0xe0, 0xa4, 0xe0, 0xb1, 0xe0, 0x01, 0xc0,
  0x1d, 0x92, 0xac, 0x34, 0xb2, 0x07, 0xe1, 0xf7, 0x8d, 0xd2, 0x88, 0xc4, 0xc9, 0xcf, 0xfc, 0x01,
  0xdb, 0x01, 0x8c, 0x91, 0x88, 0x23, 0xb1, 0xf0, 0x21, 0xe0, 0x2c, 0x93, 0x90, 0x91, 0xe8, 0x01,
  0x92, 0x30, 0x09, 0xf4, 0x4c, 0xc0, 0x38, 0xf4, 0x99, 0x23, 0x69, 0xf0, 0x91, 0x30, 0x41, 0xf4,
  0x74, 0xe0, 0x70, 0x83, 0x08, 0x95, 0x96, 0x30, 0x09, 0xf4, 0x47, 0xc0, 0x9f, 0x30, 0xc1, 0xf3,
  0x61, 0xe0, 0x60, 0x83, 0x08, 0x95, 0x30, 0x91, 0xa7, 0x01, 0x33, 0x23, 0x09, 0xf4, 0x41, 0xc0,
  0x20, 0x83, 0x40, 0x91, 0xa6, 0x01, 0xa4, 0x2f, 0xb0, 0xe0, 0xaa, 0x55, 0xbe, 0x4f, 0x12, 0x96,
  0x5c, 0x91, 0x51, 0x83, 0x4f, 0x5f, 0x4f, 0x73, 0xa4, 0x2f, 0xb0, 0xe0, 0xaa, 0x55, 0xbe, 0x4f,
  0x12, 0x96, 0xbc, 0x91, 0xb2, 0x83, 0x4f, 0x5f, 0x4f, 0x73, 0xa4, 0x2f, 0xb0, 0xe0, 0xaa, 0x55,
  0xbe, 0x4f, 0x12, 0x96, 0xac, 0x91, 0xa3, 0x83, 0x4f, 0x5f, 0x4f, 0x73, 0xdf, 0x01, 0x14, 0x96,
  0x31, 0x30, 0x21, 0xf0, 0x32, 0x30, 0x11, 0xf0, 0x33, 0x30, 0xe9, 0xf0, 0xe4, 0x2f, 0xf0, 0xe0,
  0xea, 0x55, 0xfe, 0x4f, 0xf2, 0x81, 0xfc, 0x93, 0x34, 0x50, 0x30, 0x93, 0xa7, 0x01, 0x4f, 0x5f,
  0x4f, 0x73, 0x40, 0x93, 0xa6, 0x01, 0x85, 0xe0, 0xfb, 0x01, 0x80, 0x83, 0x08, 0x95, 0x80, 0x91,
  0x88, 0x00, 0x90, 0x91, 0x89, 0x00, 0x80, 0x83, 0x08, 0x95, 0x20, 0x91, 0x00, 0x01, 0x20, 0x83,
  0x08, 0x95, 0x10, 0x82, 0x08, 0x95, 0x14, 0x82, 0xe1, 0xcf, 0xcf, 0x93, 0xdf, 0x93, 0xfc, 0x01,
  0x90, 0x81, 0x89, 0x2f, 0x80, 0x7f, 0x80, 0x38, 0x09, 0xf5, 0xbc, 0xb5, 0xbf, 0x77, 0xbc, 0xbd,
  0x9f, 0x70, 0xa9, 0x2f, 0xb0, 0xe0, 0xa9, 0x0f, 0xb1, 0x1d, 0xa9, 0x0f, 0xb1, 0x1d, 0xaa, 0x0f,
  0xbb, 0x1f, 0xaa, 0x0f, 0xbb, 0x1f, 0xaa, 0x0f, 0xbb, 0x1f, 0xa7, 0x51, 0xbe, 0x4f, 0x31, 0x96,
  0x48, 0xe1, 0x01, 0x90, 0x0d, 0x92, 0x4a, 0x95, 0xe1, 0xf7, 0xe1, 0xe0, 0xe0, 0x93, 0x03, 0x01,
  0xfc, 0xb5, 0xf0, 0x68, 0xfc, 0xbd, 0xdf, 0x91, 0xcf, 0x91, 0x08, 0x95, 0x62, 0x30, 0x08, 0xf4,
  0x84, 0xc0, 0x10, 0x92, 0xe8, 0x01, 0x94, 0x30, 0x09, 0xf4, 0x8e, 0xc0, 0x70, 0xf1, 0x97, 0x30,
  0xb9, 0xf0, 0x98, 0x30, 0x09, 0xf4, 0x7c, 0xc0, 0x96, 0x30, 0x69, 0xf7, 0x62, 0x30, 0x59, 0xf7,
  0xb1, 0x81, 0xb0, 0x93, 0x00, 0x01, 0xd0, 0xe5, 0xdc, 0xbd, 0x4b, 0x2f, 0x50, 0xe0, 0x41, 0x50,
  0x51, 0x09, 0x47, 0x30, 0x51, 0x05, 0x68, 0xf4, 0xfa, 0x01, 0xec, 0x5e, 0xff, 0x4f, 0x09, 0x94,
  0x71, 0x81, 0x70, 0x6e, 0x70, 0x93, 0x02, 0x01, 0xd0, 0xcf, 0xfd, 0xb5, 0xa1, 0xe0, 0xaf, 0x27,
  0xad, 0xbd, 0xb3, 0x30, 0x08, 0xf0, 0x8b, 0xc0, 0xb1, 0x30, 0x08, 0xf0, 0x91, 0xc0, 0x1c, 0xbc,
  0xca, 0xcf, 0xcd, 0xb5, 0xc1, 0x60, 0xcd, 0xbd, 0xf4, 0xcf, 0x92, 0x30, 0x09, 0xf4, 0x75, 0xc0,
  0x93, 0x30, 0x09, 0xf6, 0x64, 0x30, 0x09, 0xf0, 0xbe, 0xcf, 0x31, 0x96, 0x2c, 0xb5, 0x2f, 0x77,
  0x2c, 0xbd, 0xa6, 0xe4, 0xb2, 0xe0, 0x40, 0x81, 0x51, 0x81, 0x11, 0x96, 0x5c, 0x93, 0x4e, 0x93,
  0x32, 0x81, 0x12, 0x96, 0x3c, 0x93, 0x12, 0x97, 0xed, 0x01, 0x23, 0x97, 0x60, 0x81, 0x71, 0x81,
  0x79, 0x83, 0x68, 0x83, 0x52, 0x81, 0x5a, 0x83, 0x23, 0x97, 0x80, 0x81, 0x91, 0x81, 0x99, 0x83,
  0x88, 0x83, 0x72, 0x81, 0x7a, 0x83, 0x23, 0x97, 0x20, 0x81, 0x31, 0x81, 0x39, 0x83, 0x28, 0x83,
  0x92, 0x81, 0x9a, 0x83, 0x23, 0x97, 0x40, 0x81, 0x51, 0x81, 0x59, 0x83, 0x48, 0x83, 0x32, 0x81,
  0x3a, 0x83, 0x23, 0x97, 0x60, 0x81, 0x71, 0x81, 0x79, 0x83, 0x68, 0x83, 0x52, 0x81, 0x5a, 0x83,
  0x23, 0x97, 0x80, 0x81, 0x91, 0x81, 0x99, 0x83, 0x88, 0x83, 0x72, 0x81, 0x7a, 0x83, 0x23, 0x97,
  0x20, 0x81, 0x31, 0x81, 0x39, 0x83, 0x28, 0x83, 0x92, 0x81, 0x9a, 0x83, 0x58, 0x97, 0x81, 0xe0,
  0xa6, 0x3e, 0xb8, 0x07, 0x09, 0xf0, 0xbf, 0xcf, 0x70, 0xcf, 0x90, 0x93, 0xe8, 0x01, 0x7b, 0xcf,
  0x5c, 0xb5, 0x5f, 0x77, 0x5c, 0xbd, 0x31, 0x96, 0xa9, 0xee, 0xb1, 0xe0, 0x80, 0xe6, 0x01, 0x90,
  0x0d, 0x92, 0x8a, 0x95, 0xe1, 0xf7, 0x61, 0xcf, 0x65, 0x30, 0x09, 0xf0, 0x64, 0xcf, 0x21, 0x81,
  0x9c, 0xb5, 0x9f, 0x77, 0x9c, 0xbd, 0x82, 0x2f, 0x90, 0xe0, 0x82, 0x0f, 0x91, 0x1d, 0x82, 0x0f,
  0x91, 0x1d, 0xdc, 0x01, 0xa7, 0x51, 0xbe, 0x4f, 0xc2, 0x81, 0xd3, 0x81, 0x11, 0x96, 0xdc, 0x93,
  0xce, 0x93, 0xd4, 0x81, 0x12, 0x96, 0xdc, 0x93, 0x48, 0xcf, 0x62, 0x30, 0x09, 0xf0, 0x4b, 0xcf,
  0x81, 0x81, 0x90, 0xe0, 0x90, 0x93, 0x89, 0x00, 0x80, 0x93, 0x88, 0x00, 0x44, 0xcf, 0xb3, 0x30,
  0x51, 0xf0, 0xb6, 0x30, 0x08, 0xf0, 0x3f, 0xcf, 0x3c, 0xb5, 0x31, 0x60, 0x3c, 0xbd, 0x3b, 0xcf,
  0x4c, 0xb5, 0x41, 0x60, 0x4c, 0xbd, 0x6c, 0xb5, 0x62, 0x60, 0x6c, 0xbd, 0x34, 0xcf, 0x1f, 0x92,
  0x0f, 0x92, 0x0f, 0xb6, 0x0f, 0x92, 0x11, 0x24, 0x8f, 0x93, 0xef, 0x93, 0xff, 0x93, 0x80, 0x91,
  0x4b, 0x02, 0x81, 0x30, 0x19, 0xf1, 0x90, 0xf0, 0x82, 0x30, 0x41, 0xf4, 0x1e, 0xbc, 0xe0, 0x91,
  0x4a, 0x02, 0xef, 0x5f, 0xe0, 0x93, 0x4a, 0x02, 0xe6, 0x30, 0xd9, 0xf1, 0xff, 0x91, 0xef, 0x91,
  0x8f, 0x91, 0x0f, 0x90, 0x0f, 0xbe, 0x0f, 0x90, 0x1f, 0x90, 0x18, 0x95, 0x1e, 0xbc, 0xe0, 0x91,
  0x4a, 0x02, 0xef, 0x5f, 0xe0, 0x93, 0x4a, 0x02, 0xe4, 0x30, 0x81, 0xf7, 0xf1, 0xe0, 0xf0, 0x93,
  0x4b, 0x02, 0x10, 0x92, 0x4a, 0x02, 0x10, 0x92, 0x03, 0x01, 0xe8, 0xcf, 0x80, 0x91, 0x49, 0x02,
  0x8f, 0x5f, 0x80, 0x93, 0x49, 0x02, 0x81, 0x30, 0x41, 0xf1, 0xe0, 0x91, 0x4a, 0x02, 0x81, 0xe0,
  0x8e, 0x0f, 0x80, 0x93, 0x4a, 0x02, 0xf0, 0xe0, 0xe7, 0x51, 0xfe, 0x4f, 0xe0, 0x81, 0xee, 0xbd,
  0xf0, 0x91, 0x49, 0x02, 0xf3, 0x70, 0xf0, 0x93, 0x49, 0x02, 0xe0, 0x91, 0x4a, 0x02, 0xe0, 0x36,
  0x69, 0xf6, 0xf2, 0xe0, 0xf0, 0x93, 0x4b, 0x02, 0x10, 0x92, 0x4a, 0x02, 0x10, 0x92, 0x49, 0x02,
  0xc5, 0xcf, 0x10, 0x92, 0x4b, 0x02, 0x10, 0x92, 0x4a, 0x02, 0xf0, 0x91, 0x03, 0x01, 0xf1, 0x11,
  0xbd, 0xcf, 0x8c, 0xb5, 0x8f, 0x77, 0x8c, 0xbd, 0xb9, 0xcf, 0x80, 0x91, 0x02, 0x01, 0x8e, 0xbd,
  0xe4, 0xcf, 0x1f, 0x92, 0x0f, 0x92, 0x0f, 0xb6, 0x0f, 0x92, 0x11, 0x24, 0x8f, 0x93, 0x81, 0xe0,
  0x80, 0x93, 0x01, 0x01, 0x8f, 0x91, 0x0f, 0x90, 0x0f, 0xbe, 0x0f, 0x90, 0x1f, 0x90, 0x18, 0x95,
  0x1f, 0x92, 0x0f, 0x92, 0x0f, 0xb6, 0x0f, 0x92, 0x11, 0x24, 0x2f, 0x93, 0x3f, 0x93, 0x4f, 0x93,
  0x5f, 0x93, 0x6f, 0x93, 0x7f, 0x93, 0x8f, 0x93, 0x9f, 0x93, 0xaf, 0x93, 0xbf, 0x93, 0xef, 0x93,
  0xff, 0x93, 0x80, 0x91, 0xb9, 0x00, 0x88, 0x39, 0x09, 0xf4, 0x77, 0xc0, 0xc8, 0xf1, 0x88, 0x3b,
  0x09, 0xf4, 0x83, 0xc0, 0x70, 0xf5, 0x88, 0x3a, 0x09, 0xf4, 0x46, 0xc0, 0x80, 0x3b, 0x09, 0xf4,
  0x43, 0xc0, 0x80, 0x3a, 0xc9, 0xf5, 0x65, 0xed, 0x60, 0x93, 0xbc, 0x00, 0x70, 0x91, 0xbc, 0x00,
  0x74, 0xfd, 0xfc, 0xcf, 0xe0, 0x91, 0x20, 0x01, 0xf0, 0x91, 0x21, 0x01, 0x30, 0x97, 0x29, 0xf0,
  0x60, 0x91, 0xa5, 0x01, 0x82, 0xe2, 0x91, 0xe0, 0x09, 0x95, 0x65, 0xec, 0x60, 0x93, 0xbc, 0x00,
  0xff, 0x91, 0xef, 0x91, 0xbf, 0x91, 0xaf, 0x91, 0x9f, 0x91, 0x8f, 0x91, 0x7f, 0x91, 0x6f, 0x91,
  0x5f, 0x91, 0x4f, 0x91, 0x3f, 0x91, 0x2f, 0x91, 0x0f, 0x90, 0x0f, 0xbe, 0x0f, 0x90, 0x1f, 0x90,
  0x18, 0x95, 0x88, 0x3c, 0x51, 0xf3, 0x88, 0x3f, 0x59, 0xf3, 0x80, 0x3c, 0x69, 0xf4, 0xe5, 0xcf,
  0x88, 0x37, 0x09, 0xf4, 0x44, 0xc0, 0xe8, 0xf1, 0x88, 0x38, 0xb9, 0xf1, 0x80, 0x39, 0x09, 0xf4,
  0x4a, 0xc0, 0x80, 0x38, 0x09, 0xf4, 0x47, 0xc0, 0xf5, 0xed, 0xf0, 0x93, 0xbc, 0x00, 0x20, 0x91,
  0xbc, 0x00, 0x24, 0xfd, 0xfc, 0xcf, 0xd4, 0xcf, 0x10, 0x92, 0xa5, 0x01, 0xe0, 0x91, 0xa3, 0x01,
  0xf0, 0x91, 0xa4, 0x01, 0x30, 0x97, 0x09, 0xf4, 0x48, 0xc0, 0x90, 0xe8, 0x90, 0x93, 0xa2, 0x01,
  0x62, 0xea, 0x71, 0xe0, 0x82, 0xe2, 0x91, 0xe0, 0x09, 0x95, 0xb0, 0x91, 0xa2, 0x01, 0xe0, 0x91,
  0xa5, 0x01, 0xbb, 0x23, 0x09, 0xf4, 0x42, 0xc0, 0xa1, 0xe0, 0xae, 0x0f, 0xf0, 0xe0, 0xa0, 0x93,
  0xa5, 0x01, 0xee, 0x5d, 0xfe, 0x4f, 0x30, 0x81, 0x30, 0x93, 0xbb, 0x00, 0x40, 0x91, 0xa5, 0x01,
  0x50, 0x91, 0xa2, 0x01, 0x45, 0x17, 0x08, 0xf4, 0xa8, 0xcf, 0x75, 0xe8, 0x70, 0x93, 0xbc, 0x00,
  0xa7, 0xcf, 0x88, 0x36, 0x21, 0xf0, 0x80, 0x37, 0x11, 0xf0, 0x80, 0x36, 0x29, 0xf6, 0x10, 0x92,
  0xa5, 0x01, 0x55, 0xec, 0x50, 0x93, 0xbc, 0x00, 0x9b, 0xcf, 0xe0, 0x91, 0xa5, 0x01, 0xa1, 0xe0,
  0xae, 0x0f, 0xf0, 0xe0, 0xdc, 0xcf, 0xe0, 0x91, 0xa5, 0x01, 0xe7, 0xfd, 0xe6, 0xcf, 0x21, 0xe0,
  0x2e, 0x0f, 0x20, 0x93, 0xa5, 0x01, 0x30, 0x91, 0xbb, 0x00, 0xf0, 0xe0, 0xee, 0x5d, 0xfe, 0x4f,
  0x30, 0x83, 0x45, 0xec, 0x40, 0x93, 0xbc, 0x00, 0x83, 0xcf, 0xe0, 0xe0, 0xf0, 0xe0, 0xa1, 0xe0,
  0x81, 0xe0, 0x80, 0x93, 0xa2, 0x01, 0x10, 0x92, 0x22, 0x01, 0xc1, 0xcf, 0xa1, 0xe0, 0xae, 0x0f,
  0xf0, 0xe0, 0xf6, 0xcf, 0xcf, 0x93, 0xdf, 0x93, 0x00, 0xd0, 0x00, 0xd0, 0x1f, 0x92, 0xcd, 0xb7,
  0xde, 0xb7, 0x8c, 0xe2, 0x84, 0xb9, 0x05, 0xb1, 0x03, 0x7d, 0x05, 0xb9, 0x15, 0xe0, 0x10, 0x93,
  0x00, 0x01, 0x20, 0xe5, 0x2c, 0xbd, 0x3d, 0xb5, 0x31, 0x60, 0x3d, 0xbd, 0x4c, 0xb5, 0x41, 0x60,
  0x4c, 0xbd, 0x5c, 0xb5, 0x5f, 0x77, 0x5c, 0xbd, 0x1e, 0xbc, 0x63, 0xe0, 0x0d, 0xb4, 0x07, 0xfe,
  0xfd, 0xcf, 0x1e, 0xbc, 0x61, 0x50, 0xd1, 0xf7, 0x70, 0xe2, 0x90, 0xee, 0x0d, 0xb4, 0x07, 0xfe,
  0xfd, 0xcf, 0x9e, 0xbd, 0x0d, 0xb4, 0x07, 0xfe, 0xfd, 0xcf, 0x1e, 0xbc, 0x0d, 0xb4, 0x07, 0xfe,
  0xfd, 0xcf, 0x1e, 0xbc, 0x0d, 0xb4, 0x07, 0xfe, 0xfd, 0xcf, 0x1e, 0xbc, 0x71, 0x50, 0x71, 0xf7,
  0xa6, 0xe0, 0x0d, 0xb4, 0x07, 0xfe, 0xfd, 0xcf, 0x1e, 0xbc, 0xa1, 0x50, 0xd1, 0xf7, 0x0d, 0xb4,
  0x07, 0xfe, 0xfd, 0xcf, 0xb0, 0x91, 0x00, 0x01, 0xb4, 0x30, 0x61, 0xf0, 0xe4, 0xe0, 0xe0, 0x93,
  0x00, 0x01, 0xf0, 0xe5, 0xfc, 0xbd, 0x2d, 0xb4, 0x81, 0xe0, 0x82, 0x25, 0x8d, 0xbd, 0x0c, 0xb5,
  0x01, 0x60, 0x0c, 0xbd, 0x11, 0xe0, 0x10, 0x93, 0x03, 0x01, 0x2c, 0xb5, 0x20, 0x68, 0x2c, 0xbd,
  0x37, 0xb1, 0x3f, 0x60, 0x37, 0xb9, 0x48, 0xb1, 0x4f, 0x60, 0x48, 0xb9, 0x8a, 0xb1, 0x1a, 0xb8,
  0x8b, 0xb1, 0x5f, 0xef, 0x5b, 0xb9, 0x64, 0xe0, 0x71, 0xe0, 0x9c, 0xe1, 0xdb, 0x01, 0x1d, 0x92,
  0x9a, 0x95, 0xe9, 0xf7, 0x70, 0x91, 0x81, 0x00, 0x7c, 0x60, 0x70, 0x93, 0x81, 0x00, 0x10, 0x92,
  0x85, 0x00, 0x10, 0x92, 0x84, 0x00, 0xee, 0xe0, 0xf0, 0xe0, 0xf0, 0x93, 0x89, 0x00, 0xe0, 0x93,
  0x88, 0x00, 0xb0, 0x91, 0x6f, 0x00, 0xb2, 0x60, 0xb0, 0x93, 0x6f, 0x00, 0x78, 0x94, 0x47, 0x9a,
  0x3f, 0x9a, 0x8d, 0xe9, 0x90, 0xe0, 0x90, 0x93, 0x21, 0x01, 0x80, 0x93, 0x20, 0x01, 0x07, 0xe3,
  0x10, 0xe0, 0x10, 0x93, 0xa4, 0x01, 0x00, 0x93, 0xa3, 0x01, 0xf3, 0xb1, 0x13, 0xb1, 0xf1, 0x70,
  0x12, 0x70, 0x1f, 0x2b, 0x18, 0x65, 0x11, 0x0f, 0x10, 0x93, 0xba, 0x00, 0x50, 0x93, 0xbb, 0x00,
  0x20, 0x91, 0xb9, 0x00, 0x2e, 0x7f, 0x20, 0x93, 0xb9, 0x00, 0x30, 0x91, 0xb9, 0x00, 0x3d, 0x7f,
  0x30, 0x93, 0xb9, 0x00, 0x45, 0xec, 0x40, 0x93, 0xbc, 0x00, 0x78, 0x94, 0x50, 0x90, 0x0a, 0x01,
  0x80, 0x91, 0x09, 0x01, 0x30, 0x90, 0x05, 0x01, 0x3b, 0x82, 0x90, 0x90, 0x06, 0x01, 0xa0, 0x90,
  0x07, 0x01, 0xe0, 0x91, 0x08, 0x01, 0x60, 0x90, 0x11, 0x01, 0x50, 0x91, 0x10, 0x01, 0xb0, 0x90,
  0x0b, 0x01, 0xb0, 0x91, 0x0c, 0x01, 0xc0, 0x90, 0x0d, 0x01, 0xd0, 0x90, 0x0e, 0x01, 0x70, 0x91,
  0x0f, 0x01, 0x70, 0x90, 0x18, 0x01, 0x40, 0x90, 0x17, 0x01, 0xe0, 0x90, 0x12, 0x01, 0xa0, 0x91,
  0x13, 0x01, 0xf0, 0x90, 0x14, 0x01, 0x00, 0x91, 0x15, 0x01, 0x60, 0x91, 0x16, 0x01, 0x80, 0x90,
  0x1f, 0x01, 0x90, 0x91, 0x1e, 0x01, 0x10, 0x91, 0x19, 0x01, 0xf0, 0x91, 0x1a, 0x01, 0x20, 0x90,
  0x1b, 0x01, 0x2c, 0x82, 0x20, 0x91, 0x1c, 0x01, 0x29, 0x83, 0x30, 0x91, 0x1d, 0x01, 0x3a, 0x83,
  0x40, 0x91, 0x01, 0x01, 0x44, 0x23, 0xe1, 0xf3, 0x10, 0x92, 0x01, 0x01, 0x49, 0xb1, 0x40, 0x9a,
  0x41, 0x98, 0x40, 0x95, 0x45, 0x25, 0x80, 0x95, 0x48, 0x23, 0x20, 0x91, 0x04, 0x01, 0x20, 0x95,
  0x24, 0x23, 0x20, 0x93, 0x04, 0x01, 0x20, 0x95, 0x8b, 0x81, 0x82, 0x27, 0x84, 0x23, 0x8b, 0x83,
  0x80, 0x93, 0x05, 0x01, 0x38, 0x2f, 0x30, 0x95, 0x32, 0x23, 0x93, 0x26, 0x94, 0x22, 0x90, 0x92,
  0x06, 0x01, 0x39, 0x2c, 0x30, 0x94, 0x33, 0x21, 0xa3, 0x26, 0xa4, 0x22, 0xa0, 0x92, 0x07, 0x01,
  0x2a, 0x2c, 0x20, 0x94, 0x32, 0x21, 0xe3, 0x27, 0xe4, 0x23, 0xe0, 0x93, 0x08, 0x01, 0x28, 0x23,
  0x82, 0x2f, 0x83, 0x21, 0x82, 0x21, 0x8e, 0x23, 0x84, 0x23, 0x80, 0x93, 0x09, 0x01, 0x58, 0x26,
  0x50, 0x92, 0x0a, 0x01, 0x29, 0xb1, 0x41, 0x9a, 0x42, 0x98, 0x50, 0x95, 0x20, 0x95, 0x26, 0x25,
  0x25, 0x23, 0xb0, 0x94, 0xb2, 0x22, 0xb0, 0x92, 0x0b, 0x01, 0x5b, 0x2d, 0x50, 0x95, 0xb5, 0x27,
  0xb2, 0x23, 0xb0, 0x93, 0x0c, 0x01, 0x4b, 0x2f, 0x40, 0x95, 0x45, 0x23, 0xc4, 0x26, 0xc2, 0x22,
  0xc0, 0x92, 0x0d, 0x01, 0x3c, 0x2d, 0x30, 0x95, 0x43, 0x23, 0xd4, 0x26, 0xd2, 0x22, 0xd0, 0x92,
  0x0e, 0x01, 0x3d, 0x2c, 0x30, 0x94, 0x43, 0x21, 0x74, 0x27, 0x72, 0x23, 0x70, 0x93, 0x0f, 0x01,
  0x5b, 0x23, 0x53, 0x23, 0x53, 0x21, 0x57, 0x23, 0x52, 0x23, 0x50, 0x93, 0x10, 0x01, 0x65, 0x26,
  0x60, 0x92, 0x11, 0x01, 0x38, 0x2e, 0x35, 0x2a, 0x29, 0xb1, 0x42, 0x9a, 0x43, 0x98, 0x40, 0x94,
  0x20, 0x95, 0x27, 0x25, 0x24, 0x21, 0xe0, 0x94, 0xe2, 0x22, 0xe0, 0x92, 0x12, 0x01, 0x2e, 0x2c,
  0x20, 0x94, 0xa2, 0x25, 0xa2, 0x23, 0xa0, 0x93, 0x13, 0x01, 0x3a, 0x2f, 0x30, 0x95, 0x32, 0x21,
  0xf3, 0x26, 0xf2, 0x22, 0xf0, 0x92, 0x14, 0x01, 0x4f, 0x2c, 0x40, 0x94, 0x34, 0x21, 0x03, 0x27,
  0x02, 0x23, 0x00, 0x93, 0x15, 0x01, 0x40, 0x2f, 0x40, 0x95, 0x34, 0x23, 0x63, 0x27, 0x62, 0x23,
  0x60, 0x93, 0x16, 0x01, 0x2a, 0x22, 0x42, 0x20, 0x44, 0x22, 0x46, 0x22, 0x42, 0x22, 0x40, 0x92,
  0x17, 0x01, 0x74, 0x24, 0x70, 0x92, 0x18, 0x01, 0x34, 0x28, 0x3d, 0x82, 0x29, 0xb1, 0x43, 0x9a,
  0x40, 0x98, 0x90, 0x95, 0x20, 0x95, 0x28, 0x25, 0x29, 0x23, 0x10, 0x95, 0x12, 0x23, 0x10, 0x93,
  0x19, 0x01, 0x21, 0x2e, 0x20, 0x94, 0xf2, 0x25, 0xf2, 0x23, 0xf0, 0x93, 0x1a, 0x01, 0x3f, 0x2f,
  0x30, 0x95, 0x32, 0x21, 0x9c, 0x81, 0x93, 0x27, 0x92, 0x23, 0x9c, 0x83, 0x90, 0x93, 0x1b, 0x01,
  0x90, 0x95, 0x39, 0x23, 0x49, 0x81, 0x43, 0x27, 0x42, 0x23, 0x49, 0x83, 0x40, 0x93, 0x1c, 0x01,
  0x40, 0x95, 0x34, 0x23, 0x3a, 0x80, 0x33, 0x25, 0x32, 0x23, 0x3a, 0x83, 0x30, 0x93, 0x1d, 0x01,
  0x2f, 0x22, 0x92, 0x21, 0x94, 0x23, 0x93, 0x23, 0x92, 0x23, 0x90, 0x93, 0x1e, 0x01, 0x89, 0x26,
  0x80, 0x92, 0x1f, 0x01, 0x2d, 0x81, 0x29, 0x2b, 0x09, 0xf4, 0x2a, 0xcf, 0x5f, 0xb6, 0xf8, 0x94,
  0x90, 0x90, 0x0a, 0x01, 0xb0, 0x91, 0xa7, 0x01, 0xb0, 0x34, 0xf0, 0xf5, 0x80, 0x91, 0xa6, 0x01,
  0x90, 0xe0, 0x71, 0xe0, 0x7b, 0x0f, 0x70, 0x93, 0xa7, 0x01, 0xfc, 0x01, 0xeb, 0x0f, 0xf1, 0x1d,
  0xef, 0x73, 0xff, 0x27, 0xea, 0x55, 0xfe, 0x4f, 0x92, 0x82, 0xa0, 0x90, 0x11, 0x01, 0x70, 0x34,
  0x59, 0xf1, 0xa2, 0xe0, 0xab, 0x0f, 0xa0, 0x93, 0xa7, 0x01, 0xfc, 0x01, 0xe7, 0x0f, 0xf1, 0x1d,
  0xef, 0x73, 0xff, 0x27, 0xea, 0x55, 0xfe, 0x4f, 0xa2, 0x82, 0xa0, 0x34, 0xe9, 0xf0, 0x60, 0x90,
  0x18, 0x01, 0x03, 0xe0, 0x0b, 0x0f, 0x00, 0x93, 0xa7, 0x01, 0xfc, 0x01, 0xea, 0x0f, 0xf1, 0x1d,
  0xef, 0x73, 0xff, 0x27, 0xea, 0x55, 0xfe, 0x4f, 0x62, 0x82, 0xb0, 0x90, 0x1f, 0x01, 0x00, 0x34,
  0x59, 0xf0, 0xbc, 0x5f, 0xb0, 0x93, 0xa7, 0x01, 0xfc, 0x01, 0xe0, 0x0f, 0xf1, 0x1d, 0xef, 0x73,
  0xff, 0x27, 0xea, 0x55, 0xfe, 0x4f, 0xb2, 0x82, 0x5f, 0xbe, 0xa8, 0xce, 0xf8, 0x94, 0xff, 0xcf,
  0x04, 0x01, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// } // Compiled firmware

// The LEFT ATTiny has a reset pin directly connected to the ATMega
void ScannerUpdate::reset_left_attiny() {
  // Hold the left ATTiny in reset,
  DDRC |= _BV(6);
  PORTC &= ~_BV(6);
  delay(30);
  DDRC &= ~_BV(6); // Turn the ATTiny back on
}

// The RIGHT ATTiny is on the other side of the wired i2c bus.
// Our best chance at resetting it is by toggling the current limiter.
void ScannerUpdate::reset_right_attiny() {
  // Hold the left ATTiny in reset,
  DDRC |= _BV(7);
  PORTC &= ~_BV(7);
  delay(1000);
  PORTC |= _BV(7); // Turn the ATTiny back on
}

uint8_t ScannerUpdate::read_crc16(byte addr, byte *version,
                                  uint16_t *crc16, uint16_t offset,
                                  uint16_t length) {
  uint8_t result = ENDTRANS_ADDR_NACK;

  // get version and CRC16 // addr (lo) // addr (hi) // len (lo) // len (hi)
  uint8_t data[] = {
    (0x06),
    (uint8_t)(offset & 0xff), (uint8_t)(offset >> 8),
    (uint8_t)(length & 0xff), (uint8_t)(length >> 8)
  };
  result = twi_writeTo(addr, data, ELEMENTS(data), true, true);

  if (result != ENDTRANS_SUCCESS) {
    return result;
  }

  uint8_t rxBuffer[3];

  // perform blocking read into buffer
  uint8_t read = twi_readFrom(addr, rxBuffer, ELEMENTS(rxBuffer), true);
  if (read < ENDTRANS_DATA_NACK) {
    return 0xFF;
  }

  uint8_t v = rxBuffer[0];
  *version = v;
  uint8_t crc16_lo = rxBuffer[1];
  uint8_t crc16_hi = rxBuffer[2];
  *crc16 = (crc16_hi << 8) | crc16_lo;

  return result;
}

void ScannerUpdate::get_version(byte addr) {
  byte result = ENDTRANS_ADDR_NACK;
  while (result != ENDTRANS_SUCCESS) {
    byte version;
    uint16_t crc16;
    result = read_crc16(addr, &version, &crc16, 0, firmware_length);

    if (result != ENDTRANS_SUCCESS) {
      _delay_ms(100);
      continue;
    }
  }
}

int ScannerUpdate::erase_program(uint8_t addr) {
  // erase user space
  uint8_t data[] = { 0x04 };
  uint8_t result = twi_writeTo(addr, data, ELEMENTS(data), true, true);

  if (result != ENDTRANS_SUCCESS) {
    _delay_ms(1000);
    return -1;
  }
  return 0;
}

int ScannerUpdate::write_firmware(uint8_t addr) {
  uint8_t result = ENDTRANS_DATA_NACK;
  uint8_t o = 0;

  for (uint16_t i = 0; i < firmware_length; i += page_size) {
    // write page addr
    uint8_t data[] = {
      0x01,
      (uint8_t)(offsets[o] & 0xff),
      (uint8_t)(offsets[o] >> 8)
    };
    result = twi_writeTo(addr, data, ELEMENTS(data), true, true);

    _delay_ms(DELAY);
    // got something other than ACK. Start over.
    if (result != ENDTRANS_SUCCESS) {
      return -1;
    }

    // transmit each frame separately
    for (uint8_t frame = 0; frame < page_size / frame_size; frame++) {
      uint8_t data_counter = 0;
      uint8_t data[frame_size + 4] = {0};
      data[data_counter++] = 0x2; // continue page
      uint16_t crc16 = 0xffff;
      for (uint8_t j = frame * frame_size; j < (frame + 1) * frame_size; j++) {
        if (i + j < firmware_length) {
          uint8_t b = pgm_read_byte(&firmware[i + j]);
          data[data_counter++] = b;
          crc16 = _crc16_update(crc16, b);
        } else {
          data[data_counter++] = blank;
          crc16 = _crc16_update(crc16, blank);
        }
      }
      // write the CRC16, little end first
      data[data_counter++] = (uint8_t)(crc16 & 0xff);
      data[data_counter++] = (uint8_t)(crc16 >> 8);
      data[data_counter++] = (0x00); // dummy end uint8_t

      result = twi_writeTo(addr, data, ELEMENTS(data), true, true);
      // got something other than NACK. Start over.
      if (result != ENDTRANS_DATA_NACK) {
        return -1;
      }
      delay(DELAY);
    }
    o++;
  }
  return 0;
}

int ScannerUpdate::verify_firmware(byte addr) {
  byte result = ENDTRANS_DATA_NACK;
  while (result != ENDTRANS_SUCCESS) {
    byte version;
    uint16_t crc16;
    // skip the first 4 bytes, are they were probably overwritten by the reset vector preservation
    result = read_crc16(addr, &version, &crc16, offsets[0] + 4, firmware_length - 4);

    if (result != ENDTRANS_SUCCESS) {
      _delay_ms(100);
      continue;
    }

    // calculate our own CRC16
    uint16_t check_crc16 = 0xffff;
    for (uint16_t i = 4; i < firmware_length; i++) {
      check_crc16 = _crc16_update(check_crc16, pgm_read_byte(&firmware[i]));
    }
    if (crc16 != check_crc16) {
      return -1;
    }
  }
  return 0;
}

byte ScannerUpdate::update_attiny(byte addr) {
  get_version(addr);

  int erased = erase_program(addr);

  if (erased == -1) {

    return 0;
  }

  int firmware_written = write_firmware(addr);
  if (firmware_written == -1) {
    return 0;
  }

  int firmware_verified = verify_firmware(addr);
  if (firmware_verified == -1) {
    return 0;
  }

  // execute app
  uint8_t data[] = {0x03, 0x00};
  uint8_t result = twi_writeTo(addr, data, ELEMENTS(data), true, true);

  return 1;
}

void ScannerUpdate::update() {
  Serial.println(F("Updating the ATTiny firmwares..."));

  reset_left_attiny();
  if (update_attiny(LEFT_ADDRESS) == 0) {
    Serial.println(F("Updating the left side failed!"));
    return;
  }

  delay(2000);

  reset_right_attiny();
  if (update_attiny(RIGHT_ADDRESS) == 0) {
    Serial.println(F("Updating the right side failed!"));
    return;
  }

  Serial.println(F("Update successful!"));

  delay(5000);

  // reset the firmware
  wdt_enable(WDTO_120MS);
  while (1) {} // This infinite loop ensures nothing else
  // happens before the watchdog reboots us
}

}
}
}
}
#endif
